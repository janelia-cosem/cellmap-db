generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ViewToImage {
  imageId   Int @map("image_id")
  viewId      Int @map("view_id")
  images      Image  @relation(fields: [imageId], references: [id])
  views       View   @relation(fields: [viewId], references: [id])

  @@id([imageId, viewId])
  @@map("view_to_image")
}

model Publication {
  id       Int                    @id @default(autoincrement())
  name     String                 
  url      String                 @unique
  type     PublicationType
  datasets PublicationToDataset[]

  @@map("publication")
}

model PublicationToDataset {
  datasetName   String      @map("dataset_name")
  publicationId Int         @map("publication_id")
  datasets      Dataset     @relation(fields: [datasetName], references: [name])
  publications  Publication @relation(fields: [publicationId], references: [id])

  @@id([datasetName, publicationId])
  @@map("publication_to_dataset")
}

model View {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  position    Float[]
  scale       Float[]
  orientation Float[]
  tags        String[]
  datasetName String        @map("dataset_name")
  dataset     Dataset       @relation(fields: [datasetName], references: [name])
  images ViewToImage[]

  @@unique([name, datasetName])
  @@map("view")
}

model Mesh {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  url         String
  transform   Json
  imageId     Int      @map("image_id") @unique
  image       Image?    @relation(fields: [imageId], references: [id])

  @@map("mesh")
}

model Image {
  id              Int                  @id @default(autoincrement())
  name            String
  description     String
  url             String
  format          ArrayContainerFormat
  transform       Json
  displaySettings Json                 @map("display_settings")
  createdAt       DateTime             @default(now()) @map("created_at") @db.Timestamp(6)
  sampleType      SampleType
  contentType     String               @map("content_type")
  datasetName     String               @map("dataset_name")
  institution     String
  dataset         Dataset              @relation(fields: [datasetName], references: [name])
  mesh            Mesh?
  views           ViewToImage[]

  @@unique([name, datasetName])
  @@map("image")
}

model Sample {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  description   String
  protocol      String
  contributions String
  organism      String[]
  type          String[]
  subtype       String[]
  treatment     String[]

  @@map("sample")
}

model ImageAcquisition {
  id                 Int      @id @default(autoincrement())
  name               String
  institution        String
  startDate          DateTime @map("start_date")
  gridAxes           String[] @map("grid_axes")
  gridSpacing        Float[]  @map("grid_spacing")
  gridSpacingUnit    String   @map("grid_spacing_unit")
  gridDimensions     Float[]  @map("grid_dimensions")
  gridDimensionsUnit String   @map("grid_dimensions_unit")
  dataset            Dataset?

  @@map("image_acquisition")
}

model Dataset {
  id            Int                    @id @default(autoincrement())
  name          String                 @unique
  description   String
  thumbnailUrl  String                 @map("thumbnail_url")
  isPublished   Boolean                @map("is_published")
  sample        Json
  createdAt     DateTime               @default(now()) @map("created_at") @db.Timestamp(6)
  acquisitionId Int                    @unique @map("acquisition_id")
  acquisition   ImageAcquisition       @relation(fields: [acquisitionId], references: [id])
  images        Image[]
  publications  PublicationToDataset[]
  views         View[]

  @@map("dataset")
}

enum SampleType {
  SCALAR
  LABEL

  @@map("sample_type")
}

enum PublicationType {
  PAPER
  DOI

  @@map("publication_type")
}

enum ArrayContainerFormat {
  N5
  ZARR
  NEUROGLANCER_PRECOMPUTED

  @@map("array_container_format")
}
